syntax = "proto3";

package calculator;
option go_package = "calculator/calculatorpb";

// naming convention for request is <what>Request
message SumRequest {
  repeated double operands = 1; // repeated makes this a list of float64 values
  string operator = 2;
}

// naming convention for response is <what>Response
message SumResponse {
  double result = 1; // double corresponds to float64 in golang
}

message PrimeNumberDecompositionRequest {
  int32 number = 1;
}

// this represents each message block in the stream
message PrimeNumberDecompositionResponse {
  int32 factor = 1;
}

message ComputedAverageRequest {
  double number = 1;
}

message ComputedAverageResponse {
  double result = 1;
}

message FindMaximumRequest {
  int32 number = 1;
}

message FindMaximumResponse {
  int32 result = 1;
}

message SquareRootRequest {
  int32 number = 1;
}

message SquareRootResponse {
  double number_root = 1;
}

// naming convention for service is <what>Service
service CalculatorService {
  rpc Sum(SumRequest) returns (SumResponse) {}; // defines a unary api
  rpc PrimeNumberDecomposition(PrimeNumberDecompositionRequest) returns (stream PrimeNumberDecompositionResponse) {}; // defines a server streaming api
  rpc ComputedAverage(stream ComputedAverageRequest) returns (ComputedAverageResponse) {}; // defines a client streaming api
  rpc FindMaximum(stream FindMaximumRequest) returns (stream FindMaximumResponse) {}; // defines a bidirectional streaming api

  // Error handling :
  // This rpc will throw an error if the number sent is negative - Error type is INVALID_ARGUMENT
  rpc SquareRoot(SquareRootRequest) returns (SquareRootResponse) {};
}
