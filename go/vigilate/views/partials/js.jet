<script src="/static/admin/js/pusher.min.js"></script>
<script>
  let pusher = new Pusher("{{.PreferenceMap["pusher-key"]}}", {
    authEndPoint: "/pusher/auth",
    wsHost: "localhost",
    wsPort: 4001,
    forceTLS: false,
    enableTransports: ["ws", "wss"],
    disableTransports: []
  });

  let publicChannel = pusher.subscribe("public-channel");

  publicChannel.bind("AppStarting", function(data) {
    let toggle = document.getElementById("monitoring-live");
    toggle.checked = true;
    successAlert(data.message);
  });

  publicChannel.bind("AppStopping", function(data) {
    warningAlert(data.message);
    let scheduleTable = document.getElementById("schedule-table");
    if (!!scheduleTable) {
      let scheduleTableBody = document.getElementById("schedule-table-body");
      while(scheduleTableBody.firstChild) {
        scheduleTableBody.removeChild(scheduleTableBody.firstChild);
      }
    }
    let toggle = document.getElementById("monitoring-live");
    toggle.checked = false;
  });

  publicChannel.bind("ScheduleItemRemovedEvent", function(data) {
    let scheduleTable = document.getElementById("schedule-table");
    if (!!scheduleTable) {
      let existingTr = document.getElementById("schedule-"+data.host_service_id);
      if (!!existingTr) {
        existingTr.parentNode.removeChild(existingTr);
      }
    }
  });

  publicChannel.bind("HostServiceScheduleChanged", function(data) {
    let scheduleTable = document.getElementById("schedule-table");
    if (!!scheduleTable) {
      let existingTr = document.getElementById("schedule-"+data.host_service_id);
      if (!!existingTr) {
        existingTr.parentNode.removeChild(existingTr);
      }

      let tr = scheduleTable.tBodies[0].insertRow(-1);
      tr.setAttribute("id", "schedule-"+data.host_service_id);
      let td0 = tr.insertCell(0);
      td0.innerHTML = `<td>${data.host}</td>`;
      let td1 = tr.insertCell(1);
      td1.innerHTML = `<td>${data.service}</td>`;
      let td2 = tr.insertCell(2);
      td2.innerHTML = `<td>${data.schedule}</td>`;
      let td3 = tr.insertCell(3);
      if (data.last_run === undefined) {
        td3.innerHTML = `<td>pending...</td>`;
      } else {
        td3.innerHTML = `<td>${data.last_run}</td>`;
      }
      let td4 = tr.insertCell(4);
      if (data.next_run === undefined) {
        td4.innerHTML = `<td>pending...</td>`;
      } else {
        td4.innerHTML = `<td>${data.next_run}</td>`;
      }
    }
  });

  publicChannel.bind("HostServiceStatusChanged", function(data) {
    if (data.stale_status != data.new_status) {
      attention.toast({
        msg: data.message,
        icon: "info",
        timer: 30000,
        showCloseButton: true,
      });
    }
    deleteHostServiceRow(data.host_service_id)
    addHostServiceRow(data);
  });

  publicChannel.bind("HostServiceCountChanged", function(data) {
    // Use this variable to check if we are on the dashboard page
    let healthyCountExists = !!document.getElementById("healthy_count");
    if (healthyCountExists) {
      document.getElementById("healthy_count").innerHTML = data.healthy_count;
      document.getElementById("warning_count").innerHTML = data.warning_count;
      document.getElementById("pending_count").innerHTML = data.pending_count;
      document.getElementById("problem_count").innerHTML = data.problem_count;
    }
  });

  // events we want to look for
  //   - service goes down
  //   - service goes up
  //   - service status change
  //   - schedule change
  //   - monitoring is turned off
  //   - when next run event is triggered

  let attention = Prompt();

  {{if .Flash != ""}}
    successAlert('{{.Flash}}')
  {{end}}

  {{if .Warning != ""}}
    warningAlert('{{.Warning}}')
  {{end}}

  {{if .Error != ""}}
    errorAlert('{{.Error}}')
  {{end}}

  document.addEventListener("DOMContentLoaded", function () {
    let tabMap = new Map();
    let tabs = document.querySelectorAll('[data-toggle="tab"]');
    let i = 0;
    Array.prototype.filter.call(tabs, function (el) {
        el.addEventListener("click", function () {
            history.pushState("", document.title, window.location.pathname);
            localStorage.setItem('activeTab', el.getAttribute("data-target"));
        })

        tabMap.set(el.getAttribute("href"), i);
        i++;
    });

    if (!window.location.hash) {
        let activeTab = localStorage.getItem('activeTab');
        if (activeTab) {
            document.querySelectorAll('[data-toggle="tab"]')[activeTab].Tab.show()
        }
    } else {
        if (tabMap.has(window.location.hash)) {
            document.querySelectorAll('[data-toggle="tab"]')[tabMap.get(window.location.hash)].Tab.show()
        }
    }

    let monitoringToggle = document.getElementById("monitoring-live");
    monitoringToggle.addEventListener("change", function() {
      let enabled = monitoringToggle.checked;
      if (!enabled) {
        attention.confirm({
          html: "This will stop monitoring of all hosts and services. Are you sure?",
          callback: function(result) {
            if (result) {
              console.log("want to turn monitoring off");
              updateSystemPref("monitoring_live", "0");
              toggleMonitoring(0);
            } else {
              monitoringToggle.checked = true;
            }
          }
        });
      } else {
        updateSystemPref("monitoring_live", "1");
        toggleMonitoring(1);
      }
    });
  });

  function updateSystemPref(prefName, prefValue) {
    let formData = new FormData();
    formData.append("pref_name", prefName);
    formData.append("pref_value", prefValue);
    formData.append("csrf_token", "{{.CSRFToken}}");
    let ajax = new XMLHttpRequest();
    ajax.responseType = "json";
    ajax.open("POST", "/admin/preference/ajax/set-system-pref");
    ajax.send(formData);
    ajax.onreadystatechange = function() {
      // ready state changes to 4 when the ajax request has completed and a response has been received back from the server
      if (ajax.readyState === 4) {
        let resp = ajax.response;
        if (!resp.ok) {
          errorAlert("Error : " + resp.message);
        }
      }
    }
  }

  function toggleMonitoring(enabled) {
    let formData = new FormData();
    formData.append("enabled", enabled);
    formData.append("csrf_token", "{{.CSRFToken}}");
    let ajax = new XMLHttpRequest();
    ajax.responseType = "json";
    ajax.open("POST", "/admin/preference/ajax/toggle-monitoring");
    ajax.send(formData);
    ajax.onreadystatechange = function() {
      // ready state changes to 4 when the ajax request has completed and a response has been received back from the server
      if (ajax.readyState === 4) {
        let resp = ajax.response;
        if (!resp.ok) {
          errorAlert("Error : " + resp.message);
        }
      }
    }
  }

  function checkNowClickHandler(checkNow) {
    let svcId = checkNow.getAttribute("data-service-id");
    let hostId = checkNow.getAttribute("data-host-id");
    let oldStatus = checkNow.getAttribute("data-status");
    let formData = new FormData();
    formData.append("old_status", oldStatus)
    formData.append("csrf_token", "{{.CSRFToken}}")
    fetch("/admin/host/"+hostId+"/service/"+svcId+"/perform-check", {
      method: "POST",
      body: formData
    })
    .then(response => response.json())
    .then(data => {
      if (data.ok) {
        if (data.new_status != data.old_status) {
          checkNow.setAttribute("data-status", data.new_status);
          let tableRow = checkNow.parentNode.parentNode;
          let msgTableCell = tableRow.getElementsByTagName('td')[2];
          msgTableCell.innerHTML = data.message;
          attention.toast({
            msg: data.message,
            icon: "info",
            timer: 60000,
            showCloseButton: true
          });
        } else {
          attention.toast({
            msg: "Service is still in the same status : " + data.new_status,
            icon: "info",
            timer: 5000,
            showCloseButton: true
          });
        }
      } else {
        errorAlert("Something went wrong : " + data.message)
      }
    });
  }

  document.addEventListener("DOMContentLoaded", function() {
    let checkNows = document.querySelectorAll("[data-type=perform-check-host-svc]")
    for (let i = 0; i < checkNows.length; i++) {
      let checkNow = checkNows[i]
      checkNow.addEventListener("click", function(ev) {
        checkNowClickHandler(this);
        ev.preventDefault();
        ev.stopPropagation();
      });
    }
  });

  function deleteHostServiceRow(hostServiceId) {
    let tr = document.getElementById("host-service-"+hostServiceId);
    if (!!tr) {
      tr.parentNode.removeChild(tr);
    }

    let no_data_tr = document.getElementById("no-services-row");
    if (!!no_data_tr) {
      no_data_tr.parentNode.removeChild(no_data_tr);
    }
  }

  function addHostServiceRow(data) {
    let tableToUpdate = document.getElementById(data.new_status + "-table");
    if (!!tableToUpdate) {
      let tr = tableToUpdate.tBodies[0].insertRow(-1);
      tr.setAttribute("id", "host-service-"+data.host_service_id);

      if (!!document.getElementById("all-services-with-status")) {
        let td0 = tr.insertCell(0);
        td0.innerHTML = `
          <td><a href="/admin/host/${data.host_id}#pending-content">${data.host_name}</a></td>
        `;

        let td1 = tr.insertCell(1);
        td1.innerHTML = data.service_name;
      }

      if (!!document.getElementById("host-tabs")) {
        let td0 = tr.insertCell(0);
        td0.innerHTML = `
          <span class="${data.icon}">${data.service_name}</span>
          <span
            class="badge bg-secondary"
            style="cursor:pointer;"
            data-type="perform-check-host-svc"
            data-host-id="${data.host_id}"
            data-service-id="${data.service_id}"
            data-status="${data.new_status}"
          >Check Now</span>
        `;

        let checkNow = tr.querySelectorAll("[data-type=perform-check-host-svc]")[0];
        checkNow.addEventListener("click", function(ev) {
          checkNowClickHandler(this);
          ev.preventDefault();
          ev.stopPropagation();
        });

        let td1 = tr.insertCell(1);
        if (data.new_status == "pending") {
          td1.innerHTML = "pending...";
        } else {
          td1.innerHTML = data.last_check;
        }
      }

      let td2 = tr.insertCell(2);
      if (data.new_status == "pending") {
        td2.innerHTML = "-";
      } else {
        td2.innerHTML = data.message;
      }
    }
  }
</script>
