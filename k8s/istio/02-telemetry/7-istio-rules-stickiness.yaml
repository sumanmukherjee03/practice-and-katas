apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: fleetman-staff-virtual-service
  namespace: default
spec:
  hosts:
    # This the name of the k8s service that istio is applying routing rules to.
    # And we are using the fully qualified in-cluster name because the k8s service could have been in a different namespace
    # So, for the proxy to be able to discover the pods, it's best to use the full name of the k8s service.
    # You could have also just used `fleetman-staff-service`
    - fleetman-staff-service.default.svc.cluster.local
  http:
  - route:
    # We use the full service name again in the actual routes.
    # The reason why we have the service repeated here is because it is possible
    # that traffic intended for fleetman-staff-service.default.svc.cluster.local
    # could be routed to 2 completely different services like
    #   - fleetman-staff-service-1.default.svc.cluster.local
    #   - fleetman-staff-service-2.default.svc.cluster.local
    # If there are multiple destinations you need to provide a weight for each destination.
    # If there's only 1 destination then a weight is not needed.
    - destination:
        host: fleetman-staff-service.default.svc.cluster.local # This is the target DNS name
        subset: all-staff-service-pods # This is the name of the subset in destination rules
      # weight: 100 # The weight is not needed in this case because there is really just one destination

---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: fleetman-staff-destination-rules
  namespace: default
spec:
  # This the name of the k8s service that istio is applying routing rules to.
  # And we are using the fully qualified in-cluster name because the k8s service could have been in a different namespace
  # So, for the proxy to be able to discover the pods, it's best to use the full name of the k8s service.
  # You could have also just used `fleetman-staff-service`.
  host: fleetman-staff-service.default.svc.cluster.local
  trafficPolicy:
    loadBalancer:
      consistentHash:
        httpHeaderName: "x-test-canary"
  subsets:
  # The labels in the subset are selector labels
  # In this specific case make the selector to be similar to a deployment
  # ie, make the destination rule go to all staff-service pods regardless of the version.
  # That's where the `app` label comes in handy.
  - labels:
      app: staff-service # This means the select the pod with the label app and value staff-service
    name: all-staff-service-pods
